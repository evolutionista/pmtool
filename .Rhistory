library(shiny)
ui <- fluidPage(
titlePanel("This is my App"),
"Hello World",
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
date(),
numericInput(inputId = "dlevel",
label = "Dipstick Level",
value = 5, min = 0, max = 10),
selectInput(inputId = "technician",
label = "Biorepository Technician",
choices =c("Jennifer Ness","Amanda Moors"),
selected = NULL,
width = 200),
plotOutput(outputId = "hist"))
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$dlevel))
})
}
shinyApp(ui, server)
runApp()
runApp()
library(shiny)
ui <- fluidPage(
titlePanel("This is my App"),
"Hello World",
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
date(),
numericInput(inputId = "dlevel",
label = "Dipstick Level",
value = 5, min = 0, max = 10),
selectInput(inputId = "technician",
label = "Biorepository Technician",
choices =c("Jennifer Ness","Amanda Moors"),
selected = NULL,
width = 200),
plotOutput(outputId = "hist"))
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$dlevel))
})
}
shinyApp(ui, server)
runApp()
library(shiny)
#Fields to save from the form
fields <- c("date", "initl", "note")
#Shiny app to record preventative maintenance
ui <- fluidPage(
titlePanel("Preventative Maintenance Log"),
"Hello World",
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
date(),
numericInput(inputId = "dlevel",
label = "Dipstick Level",
value = 5, min = 0, max = 10),
selectInput(inputId = "technician",
label = "Biorepository Technician",
choices =c("Jennifer Ness","Amanda Moors"),
selected = NULL,
width = 200),
plotOutput(outputId = "hist"))
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$dlevel))
})
}
shinyApp(ui, server)
library(shiny)
#Fields to save from the form
fields <- c("date", "initl", "note")
#Shiny app to record preventative maintenance
ui <- fluidPage(
titlePanel("Preventative Maintenance Log"),
"Instructions: Choose Weekly or Monthly Log and record your Initials and any Notes"
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
date(),
numericInput(inputId = "dlevel",
label = "Dipstick Level",
value = 5, min = 0, max = 10),
selectInput(inputId = "technician",
label = "Biorepository Technician",
choices =c("Jennifer Ness","Amanda Moors"),
selected = NULL,
width = 200),
plotOutput(outputId = "hist"))
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$dlevel))
})
}
shinyApp(ui, server)
library(shiny)
#Fields to save from the form
fields <- c("date", "initl", "note")
#Shiny app to record preventative maintenance
ui <- fluidPage(
titlePanel("Preventative Maintenance Log"),
"Instructions: Choose Weekly or Monthly Log and record your Initials and any Notes",
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
date(),
numericInput(inputId = "dlevel",
label = "Dipstick Level",
value = 5, min = 0, max = 10),
selectInput(inputId = "technician",
label = "Biorepository Technician",
choices =c("Jennifer Ness","Amanda Moors"),
selected = NULL,
width = 200),
plotOutput(outputId = "hist"))
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$dlevel))
})
}
shinyApp(ui, server)
library(shiny)
#Fields to save from the form
fields <- c("date", "technician", "note")
#Shiny app to record preventative maintenance
ui <- fluidPage(
titlePanel("Preventative Maintenance Log"),
"Instructions: Choose Weekly or Monthly Log and record your Name and any Notes",
selectInput(inputId = "technician",
label = "Biorepository Technician",
choices =c("Jennifer Ness","Amanda Moors", "Debra Ellisor", "Jennifer Hoguet"),
selected = NULL,
width = 200),
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
date(),
textInput(inputId = "note",
label = "Note",
width = 500),
numericInput(inputId = "dlevel",
label = "Dipstick Level",
value = 5, min = 0, max = 10),
plotOutput(outputId = "hist"))
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$dlevel))
})
}
shinyApp(ui, server)
library(shiny)
# Define the fields we want to save from the form
fields <- c("name", "used_shiny", "r_num_years")
# Shiny app with 3 fields that the user can submit data for
shinyApp(
ui = fluidPage(
DT::dataTableOutput("responses", width = 300), tags$hr(),
textInput("name", "Name", ""),
checkboxInput("used_shiny", "I've built a Shiny app in R before", FALSE),
sliderInput("r_num_years", "Number of years using R",
0, 25, 2, ticks = FALSE),
actionButton("submit", "Submit")
),
server = function(input, output, session) {
# Whenever a field is filled, aggregate all form data
formData <- reactive({
data <- sapply(fields, function(x) input[[x]])
data
})
# When the Submit button is clicked, save the form data
observeEvent(input$submit, {
saveData(formData())
})
# Show the previous responses
# (update with current response when Submit is clicked)
output$responses <- DT::renderDataTable({
input$submit
loadData()
})
}
)
library(shiny)
# Define the fields we want to save from the form
fields <- c("name", "used_shiny", "r_num_years")
# Shiny app with 3 fields that the user can submit data for
shinyApp(
ui = fluidPage(
DT::dataTableOutput("responses", width = 300), tags$hr(),
textInput("name", "Name", ""),
checkboxInput("used_shiny", "I've built a Shiny app in R before", FALSE),
sliderInput("r_num_years", "Number of years using R",
0, 25, 2, ticks = FALSE),
actionButton("submit", "Submit")
),
server = function(input, output, session) {
# Whenever a field is filled, aggregate all form data
formData <- reactive({
data <- sapply(fields, function(x) input[[x]])
data
})
# When the Submit button is clicked, save the form data
observeEvent(input$submit, {
saveData <- function(data) {
data <- as.data.frame(t(data))
if (exists"responses")) {
responses <<- rbind(responses, data)}
else {
responses <<- data
}
}
}
})
# Show the previous responses
# (update with current response when Submit is clicked)
output$responses <- DT::renderDataTable({
input$submit
loadData <- function(){
if (exists("responses")) {
}
}    })
}
)
# Define the fields we want to save from the form
fields <- c("name", "used_shiny", "r_num_years")
library(shiny)
# Define the fields we want to save from the form
fields <- c("name", "used_shiny", "r_num_years")
# Save a response
# ---- This is one of the two functions we will change for every storage type ----
saveData <- function(data) {
data <- as.data.frame(t(data))
if (exists("responses")) {
responses <<- rbind(responses, data)
} else {
responses <<- data
}
}
# Load all previous responses
# ---- This is one of the two functions we will change for every storage type ----
loadData <- function() {
if (exists("responses")) {
responses
}
}
# Shiny app with 3 fields that the user can submit data for
shinyApp(
ui = fluidPage(
DT::dataTableOutput("responses", width = 300), tags$hr(),
textInput("name", "Name", ""),
checkboxInput("used_shiny", "I've built a Shiny app in R before", FALSE),
sliderInput("r_num_years", "Number of years using R", 0, 25, 2, ticks = FALSE),
actionButton("submit", "Submit")
),
server = function(input, output, session) {
# Whenever a field is filled, aggregate all form data
formData <- reactive({
data <- sapply(fields, function(x) input[[x]])
data
})
# When the Submit button is clicked, save the form data
observeEvent(input$submit, {
saveData(formData())
})
# Show the previous responses
# (update with current response when Submit is clicked)
output$responses <- DT::renderDataTable({
input$submit
loadData()
})
}
)
